generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  hotel_id         Int        @id @default(autoincrement())
  name             String
  description      String?
  email            String?    @unique
  phone            String?
  address          String?
  images           String?
  active_time      String?
  parcel_available Boolean    @default(true)
  is_active        Boolean    @default(true)
  username         String     @unique
  password         String
  created_at       DateTime   @default(now())
  table_count      Int        @default(5)
  plan             String     @default("FREE")
  upi_id           String?
  categories       Category[]
  items            MenuItem[]
  orders           Order[]
  reviews          Review[]
}

model Category {
  category_id Int        @id @default(autoincrement())
  hotel_id    Int
  name        String
  description String?
  image       String?
  hotel       Hotel      @relation(fields: [hotel_id], references: [hotel_id])
  items       MenuItem[]
}

model MenuItem {
  item_id     Int         @id @default(autoincrement())
  category_id Int
  hotel_id    Int
  name        String
  description String?
  price       Float
  available   Boolean     @default(true)
  img         String?
  discount    Float?
  category    Category    @relation(fields: [category_id], references: [category_id])
  hotel       Hotel       @relation(fields: [hotel_id], references: [hotel_id])
  orders      OrderItem[]
  reviews     Review[]
}

model Customer {
  customer_id Int      @id @default(autoincrement())
  email       String   @unique
  phone       String?
  orders      Order[]
  reviews     Review[]
}

model Order {
  order_id     Int           @id @default(autoincrement())
  hotel_id     Int
  customer_id  Int?
  table_id     String?
  total_amount Float
  payment_mode PaymentMethod
  status       OrderStatus   @default(PENDING)
  created_at   DateTime      @default(now())
  customer     Customer?     @relation(fields: [customer_id], references: [customer_id])
  hotel        Hotel         @relation(fields: [hotel_id], references: [hotel_id])
  items        OrderItem[]
}

model OrderItem {
  order_item_id Int      @id @default(autoincrement())
  order_id      Int
  item_id       Int
  quantity      Int
  price         Float
  item          MenuItem @relation(fields: [item_id], references: [item_id])
  order         Order    @relation(fields: [order_id], references: [order_id])
}

model Review {
  review_id   Int       @id @default(autoincrement())
  hotel_id    Int
  item_id     Int?
  customer_id Int
  rating      Int
  comment     String?
  created_at  DateTime  @default(now())
  customer    Customer  @relation(fields: [customer_id], references: [customer_id])
  hotel       Hotel     @relation(fields: [hotel_id], references: [hotel_id])
  item        MenuItem? @relation(fields: [item_id], references: [item_id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CARD
  CASH
  WALLET
  UPI
}
