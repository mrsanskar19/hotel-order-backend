
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  hotel_id                  Int                  @id @default(autoincrement())
  name                      String
  description               String?
  email                     String?              @unique
  phone                     String?
  address                   String?
  images                    String?
  active_time               String?
  parcel_available          Boolean              @default(true)
  is_active                 Boolean              @default(true)
  username                  String               @unique
  password                  String
  created_at                DateTime             @default(now())

  // Plan and Subscription details
  plan_name                 String               @default("FREE")
  subscription_status       SubscriptionStatus   @default(ACTIVE)
  subscription_start_date   DateTime?
  subscription_end_date     DateTime?
  max_tables_limit          Int                  @default(5)    // Max tables allowed under the plan
  max_items_limit           Int                  @default(50)   // Max menu items allowed
  max_orders_limit          Int                  @default(100)  // Max orders per month

  categories       MenuCategory[]
  items            MenuItem[]
  reviews          Review[]
  orders           Order[]
}

model MenuCategory {
  category_id Int    @id @default(autoincrement())
  hotel_id    Int
  name        String
  description String?
  image       String?

  hotel Hotel        @relation(fields: [hotel_id], references: [hotel_id])
  items MenuItem[]
}

model MenuItem {
  item_id     Int     @id @default(autoincrement())
  category_id Int
  hotel_id    Int
  name        String
  description String?
  price       Float
  available   Boolean @default(true)
  img         String?
  discount    Float?

  category   MenuCategory @relation(fields: [category_id], references: [category_id])
  hotel      Hotel        @relation(fields: [hotel_id], references: [hotel_id])
  reviews    Review[]
  orders     OrderItem[]
}

model Customer {
  customer_id Int    @id @default(autoincrement())
  email       String @unique
  phone       String?

  orders  Order[]
  reviews Review[]
}

model Order {
  order_id      Int           @id @default(autoincrement())
  hotel_id      Int
  customer_id   Int?
  table_id      String?
  sub_total     Float
  discount      Float         @default(0)
  tax           Float         @default(0)
  total_amount  Float
  payment_mode  PaymentMethod
  order_type    OrderType     @default(DINE_IN)
  notes         String?
  status        OrderStatus   @default(PENDING)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  hotel    Hotel     @relation(fields: [hotel_id], references: [hotel_id])
  customer Customer? @relation(fields: [customer_id], references: [customer_id])
  items    OrderItem[]
}

model OrderItem {
  order_item_id Int   @id @default(autoincrement())
  order_id      Int
  item_id       Int
  quantity      Int
  price         Float
  customizations String? // e.g., "extra spicy, no onions"
  status        OrderItemStatus @default(PENDING)


  order Order    @relation(fields: [order_id], references: [order_id])
  item  MenuItem @relation(fields: [item_id], references: [item_id])
}

model Review {
  review_id   Int      @id @default(autoincrement())
  hotel_id    Int
  item_id     Int?
  customer_id Int
  rating      Int
  comment     String?
  created_at  DateTime @default(now())

  hotel    Hotel    @relation(fields: [hotel_id], references: [hotel_id])
  item     MenuItem? @relation(fields: [item_id], references: [item_id])
  customer Customer @relation(fields: [customer_id], references: [customer_id])
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  SERVED
  CANCELLED
}

enum PaymentMethod {
  CARD
  CASH
  WALLET
  UPI
}
