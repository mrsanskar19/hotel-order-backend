datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Hotel {
  hotel_id         Int       @id @default(autoincrement())
  name             String
  description      String?
  email            String?   @unique
  phone            String?
  address          String?
  images           String?
  active_time      String?   // e.g. "9 AM - 11 PM"
  parcel_available Boolean   @default(true)
  is_active        Boolean   @default(true)
  username         String    @unique   // ✅ added username
  password         String              // ✅ added password (store hash, not plain text)
  created_at       DateTime  @default(now())
  table_count      Int       @default(5)
  plan             String    @default("FREE")

  categories       MenuCategory[]
  items            MenuItem[]
  reviews          Review[]
  orders           Order[]
}


model MenuCategory {
  category_id Int    @id @default(autoincrement())
  hotel_id    Int
  name        String
  description String?
  image       String?   // ✅ one image per category

  hotel Hotel    @relation(fields: [hotel_id], references: [hotel_id])
  items MenuItem[]
}

model MenuItem {
  item_id     Int     @id @default(autoincrement())
  category_id Int
  hotel_id    Int
  name        String
  description String?
  price       Float
  available   Boolean @default(true)
  img        String?
  discount   Float?   // percentage or fixed amount discount

  category   MenuCategory @relation(fields: [category_id], references: [category_id])
  hotel      Hotel        @relation(fields: [hotel_id], references: [hotel_id])
  reviews    Review[]
  orders     OrderItem[]
}

model Customer {
  customer_id Int    @id @default(autoincrement())
  email       String @unique
  phone       String?

  orders  Order[]
  reviews Review[]
}

model Order {
  order_id      Int       @id @default(autoincrement())
  hotel_id      Int
  customer_id   Int?
  table_id      String?    // dine-in table or delivery reference
  total_amount  Float
  payment_mode  PaymentMethod
  status        OrderStatus @default(PENDING)
  created_at    DateTime @default(now())

  hotel    Hotel    @relation(fields: [hotel_id], references: [hotel_id])
  customer Customer? @relation(fields: [customer_id], references: [customer_id])
  items    OrderItem[]   // ✅ one order can have multiple items
}

model OrderItem {
  order_item_id Int   @id @default(autoincrement())
  order_id      Int
  item_id       Int
  quantity      Int
  price         Float   // snapshot of price at order time

  order Order    @relation(fields: [order_id], references: [order_id])
  item  MenuItem @relation(fields: [item_id], references: [item_id])
}

model Review {
  review_id   Int      @id @default(autoincrement())
  hotel_id    Int
  item_id     Int?
  customer_id Int
  rating      Int
  comment     String?
  created_at  DateTime @default(now())

  hotel    Hotel    @relation(fields: [hotel_id], references: [hotel_id])
  item     MenuItem? @relation(fields: [item_id], references: [item_id])
  customer Customer @relation(fields: [customer_id], references: [customer_id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CARD
  CASH
  WALLET
  UPI
}
